---
export interface Props {
	headline: string;
	copy: string;
	imgSrc: string;
	imgAlt: string;
	class?: string;
}

const { copy, headline, imgSrc, imgAlt, class: className = "" } = Astro.props;
---

<script>
	import { bewegung } from "../../../lib/src/bewegung";

	const list = document.querySelector(".js-list")!.parentElement as HTMLElement;
	let modalOpen = false;

	list.addEventListener("click", async (event) => {
		if (modalOpen) {
			return;
		}
		modalOpen = true;
		const listElement = (event.target as HTMLElement).closest("li") as HTMLElement;
		const dialog = listElement.querySelector("dialog") as HTMLDialogElement;
		const dimensions = listElement.getBoundingClientRect();

		dialog.show();
		dialog.style.height = dimensions.height + "px";
		dialog.style.width = dimensions.width + "px";
		dialog.style.left = dimensions.left + "px";
		dialog.style.top = dimensions.top + "px";

		bewegung([
			[
				() => {
					dialog.style.cssText = "";
				},
				{ duration: 1000, root: "aside" },
			],
		]).play();

		dialog.querySelector("button")?.addEventListener(
			"click",
			(event) => {
				event.stopPropagation();
				const animation = bewegung([
					[
						() => {
							dialog.style.height = dimensions.height + "px";
							dialog.style.width = dimensions.width + "px";
							dialog.style.left = dimensions.left + "px";
							dialog.style.top = dimensions.top + "px";
						},
						{ duration: 1000, root: "aside" },
					],
				]);

				animation.play();
				animation.finished.then(() => {
					dialog.close();
					modalOpen = false;
				});
			},
			{ once: true }
		);
	});
</script>

<li class={`${className} js-list`}>
	<img src={imgSrc} alt={imgAlt} />

	<h3>
		{headline}
	</h3>
	<p>
		{copy}
	</p>

	<dialog id="js-dialog">
		<button>close</button>
		<img src={imgSrc} alt={imgAlt} />
	</dialog>
</li>

<style lang="scss">
	li {
		background-color: var(--color-card);
		border-radius: var(--space-100);
		display: grid;
		grid-template-rows: 1fr max-content max-content;
		overflow: hidden;
		aspect-ratio: 1;
		width: clamp(var(--space-400), 20vw, var(--space-700));
	}

	li > *:not(img, dialog) {
		margin-block-start: 0.15em;
		margin-inline-start: 1rem;
	}

	img {
		grid-area: 1 / 1 / 4 / 2;
		object-fit: cover;
		height: 100%;
		width: 100%;
	}

	h3 {
		grid-area: 2 / 1 / 3 / 2;
	}

	p {
		grid-area: 3 / 1 / 4 / 2;
		padding-block-end: 1rem;
	}

	dialog {
		position: fixed;
		width: 50vw;
		height: 50vh;
		border: none;
		top: 25%;
	}

	dialog > button {
		position: absolute;
		left: 100%;
	}
</style>
