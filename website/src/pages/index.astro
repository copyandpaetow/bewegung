---
import Layout from "../layouts/Layout.astro";
import Card from "../components/Card.astro";
---

<script>
	import { sequence } from "../../../lib/src/sequence";
	import { bewegung } from "../../../lib/src/bewegung";
	import { sleep } from "../../../lib/src/utils/constants";

	const list = document.getElementById("js-list") as HTMLElement;
	const buttonGridColum = document.getElementById("js-grid-colums") as HTMLElement;
	const buttonGridToFlex = document.getElementById("js-grid-to-flex") as HTMLElement;
	const buttonDisplayNone = document.getElementById("js-display-none") as HTMLElement;
	const buttonRemoveElement = document.getElementById("js-remove-element") as HTMLElement;
	const buttonAddElement = document.getElementById("js-add-element") as HTMLElement;
	const buttonClear = document.getElementById("js-clear") as HTMLElement;

	let animationPromise = Promise.resolve();

	const removeGridArea = () => {
		list.style.gridTemplateColumns = "1fr 1fr";
		list.querySelectorAll("li").forEach((element) => {
			element.style.gridArea = "unset";
		});
	};

	buttonGridColum.onclick = () => {
		animationPromise = animationPromise.then(() => {
			const anim = bewegung(removeGridArea, { duration: 400 });
			return anim.play();
		});
	};

	buttonGridToFlex.onclick = () => {
		animationPromise = animationPromise.then(() => {
			const anim = bewegung(() => {
				list.style.display = "flex";
				list.style.flexDirection = "column";
			}, 400);
			return anim.play();
		});
	};

	buttonDisplayNone.onclick = () => {
		animationPromise = animationPromise.then(() => {
			const anim = bewegung(() => {
				(list.querySelector("li:first-of-type") as HTMLElement).style.display = "none";
			}, 400);
			return anim.play();
		});
	};

	buttonRemoveElement.onclick = () => {
		animationPromise = animationPromise.then(() => {
			const anim = bewegung(() => {
				(list.querySelector("li:first-of-type") as HTMLElement).remove();
			}, 400);
			return anim.play();
		});
	};

	buttonAddElement.onclick = () => {
		animationPromise = animationPromise.then(() => {
			const anim = bewegung(() => {
				const lastCard = list.querySelector("li:last-of-type") as HTMLElement;
				const newElement = lastCard.cloneNode(true);
				list.prepend(newElement);
			}, 400);
			return anim.play();
		});
	};

	buttonClear.onclick = () => {
		window.location.reload();
	};
</script>

<Layout title="Bewegung">
	<section id="examples" class="split-screen">
		<div class="flow right">
			<h1>bewegung.</h1>
			<p>
				<strong>[bəˈveːɡʊŋ - the german word for motion]</strong>. This 6KB library uses the FLIP
				animation technique, which can smoothly animate layout changes. It makes the browser work
				less compared to other css and js animation approaches.
				<br />
				<br />
				Bewegung can even animate currently unanimatable properties like display: none or element addition/removal
			</p>
			<ul>
				<li>
					<a href="http://github.com">github</a>
				</li>
				<li>
					<a href="#documentation">documentation</a>
				</li>
				<li>
					<a href="#caveats">caveats</a>
				</li>
			</ul>

			<h2>Examples</h2>
			<h3>single</h3>
			<ul class="list">
				<li>
					<button id="js-grid-colums">grid-columns</button>
				</li>
				<li>
					<button id="js-grid-to-flex">grid to flexbox</button>
				</li>
				<li>
					<button id="js-display-none">display: none</button>
				</li>
				<li>
					<button id="js-remove-element">element removal</button>
				</li>
				<li>
					<button id="js-add-element">element addition</button>
				</li>
				<li>
					<button id="js-clear">clear changes</button>
				</li>
			</ul>
			<h3>other</h3>
			<ul class="list">
				<li>
					<button>scroll</button>
				</li>
				<li>
					<button>sequence</button>
				</li>
				<li>
					<button>reverse</button>
				</li>
			</ul>
		</div>

		<aside class="sticky left">
			<ul id="js-list">
				<Card
					headline="red"
					copy="from 1992"
					imgSrc="red.jpeg"
					imgAlt="coffee and flowers on a table"
					class="position"
				/>
				<Card
					headline="blue"
					copy="out of the"
					imgSrc="blue.jpeg"
					imgAlt="distant hills"
					class="position"
				/>
				<Card
					headline="green"
					copy="calming and nice"
					imgSrc="green.jpeg"
					imgAlt="wigs and leafes in front of a wall"
					class="position"
				/>
				<Card
					headline="yellow"
					copy="inperfectly perfect"
					imgSrc="yellow.jpeg"
					imgAlt="flowers in front of a wall"
					class="position"
				/>
			</ul>
		</aside>
	</section>
	<section id="documentation">
		<h2>Documentation</h2>
		<p>todo</p>
	</section>
	<section id="caveats">
		<h2>Caveats</h2>
		<p>todo</p>
	</section>
</Layout>

<style lang="scss">
	section {
		min-height: 50vh;
	}

	.sticky {
		position: sticky;
		top: 0;
	}

	.split-screen {
		display: grid;

		grid-template-columns: [content-start] 1fr [content-end];
		row-gap: 1rem;
		grid-auto-rows: max-content;

		@media (min-width: 40rem) {
			min-height: 150vh;
			grid-template-columns: [sticky-start] 1fr [sticky-end content-start] 1fr [content-end];
		}

		.right {
			grid-column: content;
			width: clamp(18rem, 80%, 40rem);
			place-self: center;
		}

		.left {
			grid-column: content;
			grid-row: 1/2;

			@media (min-width: 40rem) {
				grid-column: sticky;
			}
		}
	}

	aside {
		background-color: var(--grey-90);
		display: grid;
		place-content: center;

		height: 50vh;
		@media (min-width: 40rem) {
			height: 100vh;
		}
	}

	aside > ul {
		border: 2px solid var(--grey-85);
		border-radius: var(--space-100);
		padding: var(--space-100);
		display: grid;
		gap: var(--space-100);
		//grid-template-columns: 1fr 1fr;
	}

	.position {
		grid-area: 1 / 1 / 2 / 2;
	}
</style>
