---
import Layout from "../layouts/Layout.astro";
import Card from "../components/Card.astro";
import Nav from "../components/Nav.astro";
---

<script>
	import { sequence } from "../../../lib/src/sequence/sequence";
	import { bewegung } from "../../../lib/src/bewegung";

	const list = document.getElementById("js-list") as HTMLElement;
	const main = document.querySelector("main") as HTMLElement;
	const h1 = document.querySelector("h1") as HTMLElement;
	const article = document.querySelector("article") as HTMLElement;
	const sibling = document.querySelector(".sibling") as HTMLElement;

	const removeSibling = () => {
		sibling.remove();
	};

	const increaseH1Spacing = () => {
		h1.style.marginBlockEnd = "2rem";
	};

	const removeGridArea = () => {
		list.style.gridTemplateColumns = "1fr 1fr";
		list.querySelectorAll("li").forEach((element) => {
			element.style.gridArea = "unset";
		});
	};
	const expandArea = () => {
		main.style.gridTemplateColumns = "2fr 1fr";
	};

	const expandArticlePadding = () => {
		article.style.padding = "5%";
	};

	// setTimeout(() => {
	// 	const anim = sequence([
	// 		[removeGridArea, { root: "aside", duration: 1000 }],
	// 		[expandArticlePadding, { duration: 1000, root: article }],
	// 		[increaseH1Spacing, { root: "article section", duration: 1000, at: -500 }],
	// 		[expandArea, { duration: 1000, at: -500, root: main }],
	// 		[removeSibling, { duration: 2000 }],
	// 	]);

	// 	anim.play();
	// }, 1000);

	setTimeout(() => {
		const anim = sequence([
			[removeGridArea, { root: "aside", duration: 1000 }],
			[expandArticlePadding, { duration: 1000, root: article }],
			[increaseH1Spacing, { root: "article section", duration: 1000, at: -500 }],
			[expandArea, { duration: 1000, at: -500, root: main }],
			[removeSibling, { duration: 2000 }],
		]);
		let time = performance.now();
		let direction = "forward";

		let raf = () =>
			requestAnimationFrame((now) => {
				let current =
					direction === "forward"
						? Math.min(1, (now - time) / 6000)
						: 1 - Math.min(1, (now - time) / 6000);

				anim.seek(current);

				if (current === 1) {
					time = now;
					direction = "backward";
					requestAnimationFrame(raf);
					return;
				}

				if (current < 1 && direction === "forward") {
					requestAnimationFrame(raf);
					return;
				}

				if (current > 0 && direction === "backward") {
					requestAnimationFrame(raf);
				}
			});

		requestAnimationFrame(raf);
	}, 2000);
</script>

<Layout title="Bewegung">
	<div class="sibling"></div>
	<main>
		<article>
			<Nav pages={[]} active="home" />
			<section>
				<h1>bewegung.</h1>
				<h2>Unleash the Power of Speed - High Performance</h2>
				<p>
					High Performance Experience lightning-fast animations like never before. Our library
					capitalizes on the efficiency of the FLIP technique to deliver buttery smooth and highly
					performant animations. This ensures a seamless user experience even on less powerful
					devices, making your application truly shine.
				</p>
			</section>
			<section>
				<h2>Animate Your Way - Scrollable Animations</h2>
				<p>
					Set your creativity free with scrollable animations. Our library provides the tools you
					need to animate based on the user's scroll position. Now, you can easily design dynamic,
					interactive animations that engage users and create a truly immersive browsing experience.
				</p>
			</section>
			<section>
				<h2>Break the Boundaries - Animate Unanimatable Properties</h2>
				<p>
					Defy the limitations of traditional CSS. With our library, even properties like display:
					none can be animated, opening up a new world of possibilities. This means you can animate
					just about any CSS property to achieve the effect you're envisioning.
				</p>
			</section>
			<section>
				<h2>Bring Elements to Life - Animate Addition and Removal of Elements</h2>
				<p>
					Breathe life into your web pages. Our library lets you animate the adding or removing of
					elements, making transitions more fluid and visually appealing. Your users will appreciate
					the added detail and the polished look it gives your application.
				</p>
			</section>
			<section>
				<h2>Take Control - Low-Level API</h2>
				<p>
					Dive deep into the nuts and bolts of your animations. Our library's low-level API allows
					for a high degree of control, so you can fine-tune your animations to the last detail.
					It's ideal for developers who want to get their hands dirty and truly customize their
					animations.
				</p>
			</section>
			<section>
				<h2>Lightweight & Independent - Small Size, Zero Dependencies</h2>
				<p>
					Keep things light and simple. Our library stands on its own, without relying on other
					libraries, and it's compact in size. This means it won't bloat your application or
					complicate your project with unnecessary dependencies, making your development process
					smoother and more efficient.
				</p>
			</section>
		</article>
		<aside>
			<ul id="js-list">
				<Card
					headline="red"
					copy="from 1992"
					imgSrc="red.jpeg"
					imgAlt="coffee and flowers on a table"
					class="position"
				/>
				<Card
					headline="blue"
					copy="out of the"
					imgSrc="blue.jpeg"
					imgAlt="distant hills"
					class="position"
				/>
				<Card
					headline="green"
					copy="calming and nice"
					imgSrc="green.jpeg"
					imgAlt="wigs and leafes in front of a wall"
					class="position"
				/>
				<Card
					headline="yellow"
					copy="inperfectly perfect"
					imgSrc="yellow.jpeg"
					imgAlt="flowers in front of a wall"
					class="position"
				/>
			</ul>
		</aside>
	</main>
</Layout>

<style lang="scss">
	.sibling {
		width: 100%;
		height: 5rem;
		background-color: gray;
	}

	main {
		min-height: 100vh;
		display: grid;
		grid-auto-rows: max-content;
		grid-template-columns: 1fr;

		@media (min-width: 40rem) {
			grid-template-columns: 1fr 1fr;
		}
	}

	article {
		grid-row: 2/3;
		background-color: var(--grey-95);
		min-height: 100vh;

		@media (min-width: 40rem) {
			grid-row: 1/2;
			grid-column: 2/3;
		}
	}

	section {
		background: linear-gradient(to bottom, var(--grey-95) 0%, var(--grey-93) 100%);
		min-height: 100vh;
		display: grid;
		grid-auto-rows: max-content;
		place-content: center;
		padding: 0 clamp(var(--space-400), 10vw, var(--space-700));
	}

	section:first-of-type {
		min-height: calc(50vh - var(--space-400));

		@media (min-width: 40rem) {
			min-height: calc(100vh - var(--space-400));
		}
	}

	section > *:not(:first-child) {
		margin-block-start: 1.25em;
	}

	aside {
		grid-column: 1/2;
		grid-row: 1/2;
		height: 50vh;
		position: sticky;
		top: 0;
		background-color: var(--grey-90);
		display: grid;
		place-content: center;

		@media (min-width: 40rem) {
			height: 100vh;
		}
	}

	aside > ul {
		border: 2px solid var(--grey-85);
		border-radius: var(--space-100);
		padding: var(--space-100);
		display: grid;
		gap: var(--space-100);
		//grid-template-columns: 1fr 1fr;
	}

	.position {
		grid-area: 1 / 1 / 2 / 2;
	}
</style>
