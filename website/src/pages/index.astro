---
import Layout from "../layouts/Layout.astro";
import Card from "../components/Card.astro";
import CodeBlock from "../components/CodeBlock.astro";
---

<script>
  import {Bewegung} from  "../../../lib/src/web-component";

  Bewegung.register()

  const list = document.getElementById("js-list") as HTMLElement;
  const buttonGridColum = document.getElementById(
    "js-grid-colums"
  ) as HTMLElement;
  const buttonGridToFlex = document.getElementById(
    "js-grid-to-flex"
  ) as HTMLElement;
  const buttonDisplayNone = document.getElementById(
    "js-display-none"
  ) as HTMLElement;
  const buttonDisplayRestore = document.getElementById(
    "js-display-restore"
  ) as HTMLElement;
  const buttonRemoveElement = document.getElementById(
    "js-remove-element"
  ) as HTMLElement;
  const buttonAddElement = document.getElementById(
    "js-add-element"
  ) as HTMLElement;
  const buttonClear = document.getElementById("js-clear") as HTMLElement;
  const buttonSequence = document.getElementById("js-flex-to-grid") as HTMLElement;
  const buttonTest = document.getElementById("js-test") as HTMLElement;


  const getRandomChild = () => {
    return list.children[
      Math.floor(Math.random() * list.children.length)
    ] as HTMLElement;
  };

  const removeGridArea = () => {
    list.style.display = "grid";
    list.style.gridTemplateColumns = "1fr 1fr";
    list.querySelectorAll("li").forEach((element) => {
      element.style.gridArea = "unset";
    });
  };

  const toFlex = () => {
    list.style.display = "flex";
    list.style.flexDirection = "column";
  };

  const removeFirstImage = () => {
    getRandomChild().remove();
  };

  const cloneElement = () => {
    const newElement = getRandomChild().cloneNode(true);
    list.append(newElement);
  };

  buttonTest.onclick = () => {
    getRandomChild().style.aspectRatio = "0.5";
  };

  buttonGridColum.onclick = () => {
    list.children[0].before(list.children[list.children.length - 1]);
  };

  buttonGridToFlex.onclick = () => {
    toFlex();
  };

  buttonDisplayNone.onclick = () => {
    getRandomChild().style.display = "none";

  };

  buttonDisplayRestore.onclick = () => {
    for (const child of list.children) {
      if ((child as HTMLElement).style.cssText) {
        (child as HTMLElement).style.cssText = "";
      }
    }
  };

  buttonRemoveElement.onclick = () => {
    removeFirstImage();
  };

  buttonAddElement.onclick = () => {
    cloneElement();
  };

  buttonSequence.onclick = () => {
    removeGridArea();
  };



  buttonClear.onclick = () => {
    window.location.reload();
  };
</script>

<Layout title="Bewegung">
  <bewegung-boundary id="examples" class="split-screen" duration="200">
    <div class="flow start">
      <h1><span>bewegung.</span></h1>
      <p>
        <strong>[bəˈveːɡʊŋ - the german word for motion]</strong>. This 8KB,
        0-dependency library uses the FLIP animation technique, which can
        smoothly animate layout changes. It makes the browser work less compared
        to other css and js animation approaches.
        <br />
        <br />
        Bewegung can even animate currently unanimatable properties like display:
        none or element addition/removal
      </p>
      <ul>
        <li>
          <a href="https://github.com/copyandpaetow/bewegung">github</a>
        </li>
        <li>
          <a href="#documentation">documentation</a>
        </li>
        <li>
          <a href="#caveats">caveats</a>
        </li>
      </ul>

      <header>
        <h2>Examples</h2>
        <button id="js-clear">clear changes</button>
      </header>
      <h3>changes</h3>
      <ul class="list">
        <li>
          <button id="js-test">test</button>
        </li>
        <li>
          <button id="js-grid-colums">switch elements</button>
        </li>
        <li>
          <button id="js-grid-to-flex">grid to flex</button>
        </li>
        <li>
          <button id="js-flex-to-grid">flex to grid</button>
        </li>
        <li>
          <button id="js-display-none">hide</button>
        </li>
        <li>
          <button id="js-display-restore">show</button>
        </li>

      </ul>
      <h3>additions / deletions</h3>
      <ul class="list">
 
    
        <li>
          <button id="js-remove-element">element removal</button>
        </li>
        <li>
          <button id="js-add-element">element addition</button>
        </li>
      </ul>
    </div>

    <section class="presentation sticky end">
      <details>
        <summary>hello</summary><div>
          content that could be very long and expand quite a bit. you never know
          whats happening
        </div>
      </details>

      <div id="1">
        <div id="2">
          <div id="3">
            <div id="4">
              <div id="5">
                <div id="6">
                  <div id="7">
                    <div id="8">
                      <div class="contents">
                        <ul id="js-list">
                          <Card
                            headline="red"
                            copy="from 1992"
                            imgSrc="red.jpeg"
                            imgAlt="coffee and flowers on a table"
                            class="position"
                          />

                          <Card
                            headline="blue"
                            copy="out of the"
                            imgSrc="blue.jpeg"
                            imgAlt="distant hills"
                            class="position"
                          />

                          <Card
                            headline="green"
                            copy="calming and nice"
                            imgSrc="green.jpeg"
                            imgAlt="wigs and leafes in front of a wall"
                            class="position"
                          />

                          <Card
                            headline="yellow"
                            copy="inperfectly perfect"
                            imgSrc="yellow.jpeg"
                            imgAlt="flowers in front of a wall"
                            class="position"
                          />
                        </ul>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </section>
    <section id="documentation" class="flow start">
      <h2>Documentation</h2>
      <h3>Installation</h3>
      <p>install via npm/yarn/pnpm etc and import it</p>
      <CodeBlock>
        npm install bewegung
        <br />import &#123; Bewegung &#125; from "bewegung";
        <br />//registers the web-component unter the name "bewegung-boundary";
        <br />Bewegung.register() 

      </CodeBlock>
      
      <p> from there you can use it as a web-component. It will animate all the changes it can detect within
      </p>

    </section>
    <section id="caveats" class="flow start">
      <h2>Caveats</h2>
      <p>
        this is not a production ready piece of software and still in early
        alpha stage. The API might still be subject to change. I am still not
        sure if this will ever reach anything further because there are
        currently some bigger issues to tackle (and a myriad of bugs):
      </p>
      <br />
      <ul class="list">
        <li>
          <strong>counter-scaling:</strong>When scaling an element, its children
          get counter-scaled to look like they remain unchanged. Depending on
          the scale-amount the size change every frame for the parent and
          children might not be the same and the animation looks off even if the
          start and end are correct. Adjusting the childrens easing can fix
          this, but calculating an inverse easing curve is difficult.
        </li>
        <li>
          <strong>reactivity:</strong>We are calculating pixel-perfect start and
          end points for a given DOM. If there are changes to the DOM, the
          calculations are wrong again and need to be recalculated. It is hard
          to detect changes while animating part of it. With the resize- and
          mutation observer, we can get some of the direct changes but no
          indirect changes. There is the possibility to use an intersection
          observer with a precise root margin to see if an element changes
          position but that can only work if the animations are paused.
        </li>
        <li>
          <strong>Weird browser behaviors:</strong>Chromium-based browsers can
          throw off the calculations in certain situations. If the calculation
          happen out of the viewport and the animation is happening above it,
          the calculations are off again. This is likely due to a mechanism to
          prevent page jumps from lazy loaded elements but hard to predict.
        </li>
      </ul>
    </section>
  </bewegung-boundary>

  <style>
    section {
      min-height: 50vh;

      &:last-child {
        padding-bottom: 10vh;
      }
    }

    details {
      max-inline-size: 20ch;
    }

    .sticky {
      position: sticky;
      top: 0;
    }

    .flex {
      display: flex;
      flex-direction: column;
    }

    .split-screen {
      display: grid;

      grid-template-columns: [current-start] 1fr [current-end];
      row-gap: 1rem;
      grid-auto-rows: max-content;

      @media (min-width: 50rem) {
        min-height: 150vh;
        grid-template-columns: [current-start] 1fr [current-end sticky-start] 1.5fr [sticky-end];
      }

      .start {
        grid-column: current;
        place-self: center;
      }

      .end {
        grid-column: current;
        grid-row: 1/2;

        @media (min-width: 50rem) {
          grid-column: sticky;
        }
      }
    }

    .split-screen:has(> .flow :focus-within) #js-list {
      /* width: 15rem; 
        transform: translateX(-50%);
    transition: ease 2s;
    */
    }

    .presentation {
      display: grid;
      place-content: center;
      background-color: var(--color-background);

      min-height: 50vh;
      @media (min-width: 50rem) {
        height: 100vh;
      }
    }

    .presentation ul {
      border: 2px solid var(--grey-85);
      border-radius: var(--space-100);
      padding: var(--space-100);
      display: grid;
      grid-template-columns: 1fr 1fr;
      gap: var(--space-100);
    }

    .contents {
      display: contents;
    }

    .hidden {
      display: none;
    }

    .position {
      /* grid-area: 1 / 1 / 2 / 2; */
    }
  </style>
</Layout>
